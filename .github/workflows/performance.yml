name: Performance Benchmarks

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# Permissions needed for commenting on PRs
permissions:
  contents: read
  pull-requests: write

jobs:
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build current version
        run: pnpm build

      - name: Run performance benchmark
        run: pnpm benchmark

      - name: Get bundle size
        id: bundle-size
        run: |
          BUNDLE_SIZE=$(jq -r '.bundleSize' performance-results.json)
          echo "current=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
          echo "Current bundle size: $BUNDLE_SIZE bytes"

      - name: Download baseline performance data
        uses: actions/cache@v3
        with:
          path: performance-baseline.json
          key: performance-baseline-${{ github.base_ref || 'main' }}
          restore-keys: |
            performance-baseline-main

      - name: Run performance tests
        run: |
          # Run performance benchmarks (we'll implement the actual benchmarking tool later)
          echo "Running performance benchmarks..."

          # Create performance results file
          cat > performance-results.json << EOF
          {
            "bundleSize": ${{ steps.bundle-size.outputs.current }},
            "timestamp": "$(date -Iseconds)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}"
          }
          EOF

      - name: Compare with baseline
        id: performance-check
        run: |
          if [ -f performance-baseline.json ]; then
            echo "Baseline found, comparing..."
            
            BASELINE_SIZE=$(jq -r '.bundleSize' performance-baseline.json)
            CURRENT_SIZE=${{ steps.bundle-size.outputs.current }}
            
            # Calculate percentage change using awk (more portable than bc)
            CHANGE_PERCENT=$(awk "BEGIN {printf \"%.2f\", (($CURRENT_SIZE - $BASELINE_SIZE) * 100) / $BASELINE_SIZE}")
            
            echo "baseline_size=$BASELINE_SIZE" >> $GITHUB_OUTPUT
            echo "current_size=$CURRENT_SIZE" >> $GITHUB_OUTPUT
            echo "change_percent=$CHANGE_PERCENT" >> $GITHUB_OUTPUT
            
            echo "Performance comparison:"
            echo "Baseline: $BASELINE_SIZE bytes"
            echo "Current:  $CURRENT_SIZE bytes"
            echo "Change:   $CHANGE_PERCENT%"
            
            # Check thresholds using awk for comparison
            if (( $(awk "BEGIN {print ($CHANGE_PERCENT > 10)}") )); then
              echo "‚ùå Bundle size increased by more than 10%!"
              echo "performance_status=failed" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ Performance check passed"
              echo "performance_status=passed" >> $GITHUB_OUTPUT
            fi
          else
            echo "No baseline found, creating initial baseline..."
            cp performance-results.json performance-baseline.json
            echo "performance_status=baseline" >> $GITHUB_OUTPUT
            echo "current_size=${{ steps.bundle-size.outputs.current }}" >> $GITHUB_OUTPUT
            echo "baseline_size=${{ steps.bundle-size.outputs.current }}" >> $GITHUB_OUTPUT
            echo "change_percent=0" >> $GITHUB_OUTPUT
          fi

      - name: Save performance baseline (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/cache/save@v3
        with:
          path: performance-baseline.json
          key: performance-baseline-main

      - name: Comment on PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const status = '${{ steps.performance-check.outputs.performance_status }}';
            const currentSize = '${{ steps.performance-check.outputs.current_size }}';
            const baselineSize = '${{ steps.performance-check.outputs.baseline_size }}';
            const changePercent = '${{ steps.performance-check.outputs.change_percent }}';

            let statusIcon = '‚úÖ';
            let statusText = 'Performance check passed';

            if (status === 'failed') {
              statusIcon = '‚ùå';
              statusText = 'Performance regression detected';
            } else if (status === 'baseline') {
              statusIcon = 'üìä';
              statusText = 'Baseline performance recorded';
            }

            const formatBytes = (bytes) => {
              const sizes = ['Bytes', 'KB', 'MB'];
              if (bytes === 0) return '0 Bytes';
              const i = Math.floor(Math.log(bytes) / Math.log(1024));
              return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
            };

            let body = `## ${statusIcon} Performance Analysis\n\n**${statusText}**\n\n`;

            if (status !== 'baseline') {
              body += `| Metric | Baseline | Current | Change |\n`;
              body += `|--------|----------|---------|--------|\n`;
              body += `| Bundle Size | ${formatBytes(baselineSize)} | ${formatBytes(currentSize)} | ${changePercent}% |\n`;
              
              if (parseFloat(changePercent) > 10) {
                body += `\n‚ö†Ô∏è **Warning:** Bundle size increased by more than 10%. Please review the changes.`;
              } else if (parseFloat(changePercent) < -5) {
                body += `\nüéâ **Great!** Bundle size decreased by ${Math.abs(changePercent)}%`;
              }
            } else {
              body += `üìä **Bundle Size:** ${formatBytes(currentSize)}\n\n`;
              body += `This is the first performance measurement for this branch.`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Fail if performance regression
        if: steps.performance-check.outputs.performance_status == 'failed'
        run: |
          echo "Performance regression detected!"
          exit 1

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.sha }}
          path: |
            performance-results.json
            bundle-analysis-current.json
          retention-days: 30
